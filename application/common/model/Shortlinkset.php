<?php
/**
 * Created by PhpStorm.
 * User: k
 * Date: 2018/11/7
 * Time: 18:26
 */
namespace app\common\model;

use think\Model;

/**
 * Class Shortlinkset
 * @package app\common\model
 * 链接检查模型
 */
Class Shortlinkset extends Model{



    /**
     * @param string $link 链接地址
     * @param $offset 从第几条开始
     * @param $limit 限制几条
     * @return array 返回数据集合
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public static function getShortLink($link = '',$offset,$limit)
    {
        $criteria = array();
        $returnArray = array();
        $errorModel = new \app\common\model\Error();
        if(!empty($link)){
            $result = self::where($criteria)->where('link','like','%'.$link.'%')->limit($offset,$limit)->select()->toArray();
            $count = self::where($criteria)->where('link','like','%'.$link.'%')->count();
        }else{
            if($limit == 0){
                $result = self::select()->toArray();
                $count = self::count();
            }else{
                $result = self::where($criteria)->limit($offset,$limit)->select()->toArray();
                $count = self::where($criteria)->count();
            }
        }

        if(!empty($result)){
            $returnArray = array(
                'code' => 0,
                'msg' => $errorModel::ERRORCODE[0],
                'count' =>$count,
                'data' => $result
            );
        }else{
            $returnArray = array(
                'code' => 10001,
                'msg' => $errorModel::ERRORCODE[10001],
                'data' => $result
            );
        }
        return $returnArray;
    }


    /**
     * @param array $data 添加的数据
     * @param null $field 指定添加的字段
     * @return Model
     */
    public static function create($data = [], $field = null)
    {
        return parent::create($data, $field); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $data 修改的数据
     * @param array $where 修改条件
     * @param null $field 修改字段
     * @return Model
     */
    public static function update($data = [], $where = [], $field = null)
    {
        return parent::update($data, $where, $field); // TODO: Change the autogenerated stub
    }

    /**
     * @param mixed $data 删除的调教
     * @return int
     */
    public static function destroy($data)
    {
        return parent::destroy($data); // TODO: Change the autogenerated stub
    }

    /**
     * 查询表达式
     * @access public
     * @param mixed  $data  主键列表或者查询条件（闭包）
     * @param string $with  关联预查询
     * @param bool   $cache 是否缓存
     * @return Query
     */
    public static function get($data, $with = [], $cache = false)
    {
        return parent::get($data, $with, $cache); // TODO: Change the autogenerated stub
    }

    public static function getOne($data)
    {
        if(!empty($data)){
            $result= self::where($data)->find();
            if($result){
                $result = $result->toArray();
                $rerurnArray = [
                    'code' => 0,
                    'msg' => Error::ERRORCODE[0],
                    'data' => $result
                ];
            }else{
                $rerurnArray = [
                    'code' => 16002,
                    'msg' => Error::ERRORCODE[16002],
                    'data' => []
                ];
            }
        }else{
            $rerurnArray = [
                'code' => 10005,
                'msg' => Error::ERRORCODE[10005],
                'data' => []
            ];
        }

        return $rerurnArray;
    }
}
